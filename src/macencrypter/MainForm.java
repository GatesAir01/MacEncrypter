package macencrypter;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.IOException;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

import com.jtattoo.plaf.hifi.HiFiLookAndFeel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jlucas
 */
public class MainForm extends javax.swing.JFrame {
	
	DefaultTableModel model;
	MacFile file;
	
    /**
     * Creates new form MainForm
     */
    public MainForm() {
    	super("Mac Encrypter/Decrypter");

        initComponents();
        
        model = new DefaultTableModel();
    	model.addColumn("Mac Addresses");
    	MacTable.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoadFile = new javax.swing.JButton();
        AddMac = new javax.swing.JButton();
        SaveFile = new javax.swing.JButton();
        EditMac = new javax.swing.JButton();
        DeleteMac = new javax.swing.JButton();
        MacPane = new javax.swing.JScrollPane();
        MacTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        LoadFile.setText("LoadFile");
        LoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileActionPerformed(evt);
            }
        });

        AddMac.setText("Add Mac");
        AddMac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMacActionPerformed(evt);
            }
        });

        SaveFile.setText("Save File");
        SaveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileActionPerformed(evt);
            }
        });

        EditMac.setText("Edit Mac");
        EditMac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMacActionPerformed(evt);
            }
        });

        DeleteMac.setText("Delete Mac");
        DeleteMac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMacActionPerformed(evt);
            }
        });

        MacTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mac Addresses"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        MacPane.setViewportView(MacTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LoadFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddMac)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EditMac)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DeleteMac)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SaveFile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MacPane, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(312, 312, 312)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoadFile)
                    .addComponent(AddMac)
                    .addComponent(SaveFile)
                    .addComponent(EditMac)
                    .addComponent(DeleteMac))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MacPane, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(42, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileActionPerformed
    	JFileChooser chooser = new JFileChooser();
    	
    	int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
       		file = new MacFile(chooser.getSelectedFile().getAbsolutePath());
        
	        byte[] byteUnecrypted = new byte[0];
	        
	        try {
				byteUnecrypted = file.decrypt(file.load());
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IllegalBlockSizeException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (BadPaddingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        
	        String loadString = new String(byteUnecrypted);
	        
	        String[] parts = loadString.split(",");
	        
	        model = new DefaultTableModel();
            model.addColumn("Mac Addresses");
            
            for(int x = 0; x < parts.length; x++){
            	Vector temp = new Vector();
            	temp.add(parts[x]);
                model.addRow(temp);
            }
            MacTable.setModel(model);
        }
        else {
        	JOptionPane.showMessageDialog(this, "Please reselect the desired file.");
        }
        
    }//GEN-LAST:event_LoadFileActionPerformed

    private void AddMacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMacActionPerformed
    	String s = (String)JOptionPane.showInputDialog(this, "Enter Mac Address:", "Add Mac", JOptionPane.PLAIN_MESSAGE, null, null, "");
    	Vector temp = new Vector();
    	temp.add(s);
    	model.addRow(temp);
    }//GEN-LAST:event_AddMacActionPerformed

    private void SaveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileActionPerformed
    	JFileChooser chooser = new JFileChooser();
    	
    	int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {

       		file = new MacFile(chooser.getSelectedFile().getAbsolutePath());
       		
       		String unecryptedMacs = "";
        	
        	for(int x = 0; x < model.getRowCount() - 1; x++) {
        		unecryptedMacs += ((String)model.getValueAt(x, 0)) + ",";
        	}

        	if(model.getRowCount() > 0) {
        		unecryptedMacs += ((String)model.getValueAt(model.getRowCount() - 1, 0)) + ",";
        	}
        	
    		byte[] encryptedMac = file.encrypt(unecryptedMacs);
    		
    		file.save(encryptedMac);
        }
        else {
        	JOptionPane.showMessageDialog(this, "Please reselect the desired file.");
        }
    }//GEN-LAST:event_SaveFileActionPerformed

    private void EditMacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMacActionPerformed
    	if(MacTable.getSelectedRow() == -1) {
    		JOptionPane.showMessageDialog(this, "Please select an item in the list.");
    	}
    	else {
	    	String s = (String)JOptionPane.showInputDialog(this, "Edit Mac Address:", "Edit Mac", JOptionPane.PLAIN_MESSAGE, null, null, model.getValueAt(MacTable.getSelectedRow(), 0));
	    	model.setValueAt(s, MacTable.getSelectedRow(), 0);
    	}
    }//GEN-LAST:event_EditMacActionPerformed

    private void DeleteMacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMacActionPerformed
    	if(MacTable.getSelectedRow() == -1) {
    		JOptionPane.showMessageDialog(this, "Please select an item in the list.");
    	}
    	else {
    		model.removeRow(MacTable.getSelectedRow());
    	}
    }//GEN-LAST:event_DeleteMacActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    	Locale.setDefault(new Locale("en", "US"));
        String laf = UIManager.getSystemLookAndFeelClassName();
        Properties props = new Properties();
        props.put("logoString", "Intraplex");
        HiFiLookAndFeel.setCurrentTheme(props);
        try {UIManager.setLookAndFeel("com.jtattoo.plaf.hifi.HiFiLookAndFeel");} catch (Exception ex) {}

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddMac;
    private javax.swing.JButton DeleteMac;
    private javax.swing.JButton EditMac;
    private javax.swing.JButton LoadFile;
    private javax.swing.JScrollPane MacPane;
    private javax.swing.JTable MacTable;
    private javax.swing.JButton SaveFile;
    // End of variables declaration//GEN-END:variables
}
